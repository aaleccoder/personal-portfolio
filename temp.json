{
    "es": {
        "title": "Presentamos TauleChat: un espacio de IA elegante y pensado para desarrolladores para su escritorio",
        "summary": "En un mundo con innumerables modelos y proveedores de IA, ¿alguna vez te encuentras inmerso en un mar de pestañas del navegador? Una para Gemini, otra para un modelo Deepseek, cada una con sus propias peculiaridades e interfaz. Puede resultar desordenado e ineficiente. ¿Qué pasaría si pudieras tener una única aplicación, limpia y rápida, directamente en tu escritorio para interactuar con todas? (O quizás no, una IA escribió este resumen; no confíes en él, te quiero, por favor, léelo).",
        "content": "Presentamos TauleChat: Un espacio de IA elegante y pensado para desarrolladores en tu escritorio\n\nEn un mundo con innumerables modelos y proveedores de IA, ¿alguna vez te encuentras inmerso en un mar de pestañas del navegador? Una para Gemini, otra para tu modelo OpenRouter favorito, cada una con sus propias peculiaridades e interfaz. Puede resultar desordenado e ineficiente. ¿Qué pasaría si pudieras tener una única aplicación, limpia y rápida, directamente en tu escritorio para interactuar con todas?\n\nDescubre **[TauLeChat](https://github.com/aaleccoder/taulechat)**.\n\nTauleChat es una aplicación de chat ligera y pensada para desarrolladores y entusiastas de la IA que buscan una forma ágil y potente de interactuar con Modelos de Lenguaje Grandes (LLM). Desarrollada con una pila moderna que incluye Tauri, React y Rust, está diseñada para ofrecer velocidad, simplicidad y extensibilidad.\n\n## ¿Por qué TauLeChat?\nBueno, básicamente por necesidad. No tengo mucho espacio disponible en mi teléfono debido a sus especificaciones más bajas. Así que solía tener entre 5 y 6 aplicaciones diferentes para los distintos LLM. Así es básicamente donde empezó todo.\n\nOtro problema es que en el escritorio muchas aplicaciones no estaban disponibles en todas partes o eran demasiado complicadas de configurar. Algunas tenían errores extraños, lo que me hacía arrepentirme y no disfrutar de su uso. Además, estaban diseñadas para usuarios con mucha más experiencia que yo.\n\n**tldr:** Solo quería una aplicación sencilla.\n\nIntenté crear una aplicación como esta varias veces, pero a menudo me detenía al usar Flutter o React Native. Descubrí que ninguno de los dos era muy capaz, al menos de forma sencilla. Flutter, en esencia, podría haber sido una buena opción y quizás las cosas hubieran funcionado, pero mi problema radica en que Dart es un lenguaje que no me gusta, además de que estoy bastante acostumbrado a la forma en que se usan las tecnologías web para el frontend.\n\nFue entonces cuando encontré [Tauri](https://v2.tauri.app/). Tenía dos cosas que me gustaron. No es Electron, así que tiene buen rendimiento. Y la segunda, pude elegir el framework que me gustara.\n\nMe decidí por React por su gran compatibilidad con el renderizado Markdown y Katex. Implementarlo fue tan fácil como importar algunos plugins y configurar la interfaz de usuario. Eso fue todo.\n\nOtra cosa que me encantó de Tauri es que sí, necesitas saber algo de Rust, pero básicamente puedes crear una aplicación completa sin tener que escribir mucho en Rust. De hecho, casi solo usé Rust para algunas optimizaciones de imágenes y las migraciones de SQLite.\n\nY me permitió tener una aplicación para Android, pero la aplicación era una aplicación de escritorio, en lugar de lo contrario, como podría haber sido con Flutter o React Native.\nLa experiencia de desarrollo fue excelente; pude desarrollarla en unas dos semanas. Puede ser demasiado o muy poco dependiendo de tus habilidades, pero considerando que nunca realicé un proyecto completo que yo consideraría algo que otros usarían.\n\nSoy un desarrollador junior, estoy aprendiendo, y me da miedo la IA, sí, pero hice esto para mi propio aprendizaje y para satisfacer mis propias necesidades. Por lo tanto, la aplicación es muy subjetiva, y el código también. El código que escribí (la mayor parte, pero la IA realmente ayuda).\n\n## Así que, las características necesitan más explicación.\nActualmente, la aplicación es compatible con OpenRouter y todos sus modelos, junto con los modelos de Gemini a través de Google AI Studio. Admite la mayoría de las funciones compatibles con estos dos proveedores. Por ejemplo:\n- Transmisión SSE, análisis de pensamientos, generación de texto e imágenes.\n- Compatibilidad con PDF, con anotaciones en PDF para OpenRouter. Y para Gemini, admite PDF, pero aún no con FileAPI.\n- Compatibilidad con Latex, Markdown y resaltado de sintaxis. - Permite previsualizar algunos metadatos esenciales de los enlaces que el chatbot te envía solicitándolos a través del puerto 443 (la mayoría de los sitios web públicos utilizan este puerto).\n- Envío de imágenes, con optimización del envío de imágenes en el dispositivo mediante Rust para reducir el tamaño.\n- En teoría, admite la generación de imágenes. La generación de imágenes Flash de Gemini 2.5 funciona a la perfección, pero no pude probar los modelos de OpenRouter o Imagen, ya que son de pago y no tengo acceso a ellos.\n- El rendimiento es asombroso, al menos según mis propias comparaciones, que obviamente probablemente estén sesgadas.\n- Búsqueda web, URL de contexto y ejecución de código de Gemini.\n- Modificación de los parámetros de los modelos tanto para Gemini como para OpenRouter.\n- Metadatos de uso para cada mensaje.\n\nPor ahora, eso es todo.\n## ¿Qué sigue?\n\nBásicamente, no lo sé, ya se adapta a mis necesidades. Solo trabajaré en otros aspectos y otras cosas que necesite. Básicamente, hice esto para aprender y para ayudarme a mí mismo. Corregiré errores, por supuesto, y si alguna vez necesito una nueva función, simplemente la implementaré.\n\nNo busco donaciones ni nada parecido; aunque quisiera, no tengo forma de conseguirlas. \n\nEso es todo, gracias por leer y espero que tengas una feliz Navidad. Mariah Carey viene, ¡corre!\n\nPD: Disculpen si hay algún error ortográfico, no estoy revisando esto."
    },
    "en": {
        "title": "Introducing TauleChat: A Sleek, Developer-First AI Playground for Your Desktop",
        "summary": "In a world of countless AI models and providers, do you ever find yourself drowning in a sea of browser tabs? One for Gemini, another for your favorite OpenRouter model, each with its own quirks and interface. It can feel cluttered and inefficient. What if you could have a single, clean, and fast application right on your desktop to interface with them all?",
        "content": "Enter **[TauLeChat](https://github.com/aaleccoder/taulechat)**.\n\nTauleChat is a lightweight, desktop-first chat application designed for developers and AI enthusiasts who want a streamlined and powerful way to interact with Large Language Models (LLMs). Built with a modern stack featuring Tauri, React, and Rust, it’s engineered for speed, simplicity, and extensibility.\n\n## Why TauLeChat in the first place?\nWell its basically out of my own necessity. I don't have lots of space available on my phone due to it being of lowers specs. So i often ended up having 5-6 different apps for the different LLMs. So this is basically where everything started. \n\nAnother thing is on desktop, many apps were just not available in all places or too complicated to set up. Some had weird bugs, and it kinda made me regret and not enjoy using them. Its also they were kinda build for like, way more experienced users than me maybe.\n\n**tldr:** I just wanted to have a simple app.\n\nI tried several times to built an app like this, but i often came to a stop when it came to using Flutter or React Native. I found them both to be not that capable on this, at least on easy way. Flutter at its core couldve been a good choice and maybe things would have worked, but my problem with it comes out of Dart being kind of a language i don't like plus i am kinda used to the way of using web technologies for frontend.\n\nThat's when i found [Tauri](https://v2.tauri.app/) it has two things i liked. Its not electron, so it is performant. And the second one, i got to choose whichever framework i liked.\n\nI went with React due to its strong support for markdown rendering and katex. Implementing that was as easy as importing some plugins and configuring the UI. That was it. \n\nAnother thing i loved about Tauri is that yes, you kinda need to know a bit of Rust, but you can basically build a whole app without having to write that much Rust, in reality i almost only touched Rust for some image optimizations and the SQLite migrations. \n\nAnd it allowed me to be able to have an Android app, but the app was a desktop first app instead of the opposite how it could have been with Flutter or React Native.\nThe development experience was great, i was able to build this in around ~2 weeks to this state. It may be too much or too little depending in your skills, but considering i never really did a full project which i would call something other people will use. \n\nI am a junior, i am learning, i am scared of AI yes, but i did this for my own learning and to help my own needs. So the app is very opinionated, and the code is too. Whatever code is actually written by me(most of it but AI really helps). \n\n## So, features have to talk more\nCurrently the app support OpenRouter and all its models, together with Gemini models through the Google AI Studio. It supports most of the features this two providers support. To list them:\n- SSE streaming, parsing of thoughts, text, and image generations.\n- PDF support, with PDF annotation for OpenRouter. And for Gemini it support PDFs, but not yet the FileAPI.\n- Latex, Markdown and Syntax Highlighting support.\n- Allow previewing of some essential metadata of links the chatbot sends you by requesting them through the 443 port(most public websites are in this port).\n- Sending of images, with optimization of the sending images on-device using Rust to alleviate size.\n- Support image generation in theory. Gemini 2.5 Flash Image Generation works flawlessly, but i couldn't test OpenRouter or Imagen models since this are paid, and i don't have access to that.\n- The performance is amazing, at least of my own comparisons which is obviously probably biased.\n- Web search, context url and code execution of Gemini.\n- Modification of parameters of the models for both Gemini and OpenRouter.\n- Usage Metadata for each message.\n\nSo for now, thats it.\n## What's next?\n\nEssentially i don't kinda know, it already suits my necessities, i will just work on miscellanous and other things i need. Essentially i did this for learning and to help myself. Ill fix bugs of course, and if i ever need a new feature, ill just do it. \n\nIm not looking for donations or any whatsover, even if i wanted to i have no way of getting them. Building things in my country is hard. But if you do ever happen to encounter this project, don´t doubt in giving a star or contacting. Ill be pleased to talk and learn more of what you can say and opinion.\n\nIf you need a new feature, you can also request it. Either here in the comments, write to my email or as a github issue. You are free to do so.\n\nSo thats all, thank you for reading, and i hope you have a good christmas, Mariah Carey is coming, run.\n\nPD: Pardon me if any ortgraphic problem, and im not proofreading this."
    }
}